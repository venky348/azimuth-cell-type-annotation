library(Azimuth)
library(Azimuth)
devtools::install_github("satijalab/seurat", "seurat5")
install.packages("devtools")
devtools::install_github("satijalab/seurat", "seurat5")
library(Seurat)
library(seurat)
library(Seurat)
devtools::install_github("satijalab/seurat-data", "seurat5")
devtools::install_github("satijalab/seurat", "seurat5")
devtools::install_github("satijalab/azimuth", "seurat5")
devtools::install_github("satijalab/azimuth")
library(Azimuth)
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
# Install dependencies from Bioconductor
BiocManager::install(c("BSgenome.Hsapiens.UCSC.hg38",
"EnsDb.Hsapiens.v86",
"glmGamPoi",
"TFBSTools"))
devtools::install_github("satijalab/azimuth")
library(Azimuth)
devtools::install_github("theislab/anndata")
BiocManager::install("anndata")
library(anndata)
install.packages("remotes")
install.packages("remotes")
remotes::install_github("mojaveazure/seurat-disk")
remotes::install_github("satijalab/seurat", force = TRUE)
remotes::install_github("mojaveazure/seurat-disk", force = TRUE)
remotes::install_github("satijalab/azimuth", force = TRUE)
library(Seurat)
library(SeuratDisk)
library(Azimuth)
library(SeuratDisk)
remotes::install_github("mojaveazure/seurat-disk", force = TRUE)
library(SeuratDisk)
pip install anndata
q(save = "no")
install.packages("hdf5r")
remotes::install_github("mojaveazure/seurat-disk")
q()
install.packages("Seurat")
devtools::install_github("satijalab/azimuth")
install.packages("h5")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("Rtsne")
library(Azimuth)
AvailableData()
install.packages("Seurat")
remotes::install_github("satijalab/azimuth", ref = "master")
install.packages("SeuratData")
# Load required libraries
library(Seurat)
library(Azimuth)
library(SeuratData)
available_data<-AvailableData()
available_data
#Install the human lung reference data
InstallData('kidneyref')
library(reticulate)
anndata <- import("anndata")
adata <- anndata$read_h5ad("/data/expr.h5ad")
reticulate::py_install("anndata")
adata <- anndata$read_h5ad("/data/expr.h5ad")
anndata <- import("anndata")
adata <- anndata$read_h5ad("/data/expr.h5ad")
getwd()
setwd("/Users/venkateshtalasila/My Files/GitHub Repositories/Azimuth_Cell_Type_Annotation")
adata <- anndata$read_h5ad("/data/expr.h5ad")
adata <- anndata$read_h5ad("data/expr.h5ad")
install.packages("Seurat")
install.packages("Seurat")
remotes::install_github("satijalab/azimuth", ref = "master")
install.packages("SeuratData")
# Load required libraries
library(Seurat)
library(Azimuth)
InstallData('kidneyref')
available_data<-AvailableData()
getwd()
library(Seurat)
library(Azimuth)
library(SeuratData)
library(reticulate)
reticulate::py_install("anndata")
anndata <- import("anndata")
available_data<-AvailableData()
available_data
InstallData('kidneyref')
adata <- anndata$read_h5ad("data/expr.h5ad")
seurat_obj <- CreateSeuratObject(data, project = "tutorial", assay = "RNA")
data <- assay(adata, "X")
str(data)
dim(data)
class(data)
seurat_obj <- CreateSeuratObject(adata, project = "tutorial", assay = "RNA")
str(adata)
dim(adata)
class(adata)
data <- as.matrix(adata)
print(names(adata@layers))
data <- assay(adata, "spliced")
InstallData('kidneyref')
adata <- anndata$read_h5ad("data/expr.h5ad")
str(adata)
dim(adata)
class(adata)
print(names(adata@layers))
print(adata$layers$keys())
data <- py_to_r(adata$layers$get("spliced"))
# Convert it to a matrix if it's not already
data <- as.matrix(data)
# Check the dimensions
dim(data)
seurat_obj <- CreateSeuratObject(counts = data, project = "tutorial", assay = "RNA")
print(seurat_obj)
seurat_obj_spliced <- Azimuth::RunAzimuth(seurat_obj, reference = "kidneyref")
seurat_obj <- NormalizeData(seurat_obj)
seurat_obj <- FindVariableFeatures(seurat_obj)
seurat_obj <- ScaleData(seurat_obj)
seurat_obj <- RunPCA(seurat_obj)
seurat_obj_spliced <- Azimuth::RunAzimuth(seurat_obj, reference = "kidneyref")
head(rownames(seurat_obj))
# Check feature names in the reference
head(rownames(kidneyref))
kidneyref <- Azimuth::LoadReference(reference = "kidneyref")
seurat_features <- rownames(seurat_obj)
head(seurat_features)
kidneyref_features <- rownames(Azimuth::LoadReference(reference = "kidneyref"))
adata <- anndata$read_h5ad("data/expr.h5ad")
str(adata)
dim(adata)
class(adata)
print(adata$layers$keys())
# Extract the "spliced" layer
data <- py_to_r(adata$layers$get("spliced"))
data <- as.matrix(data)
dim(data)
seurat_obj <- CreateSeuratObject(counts = data, project = "tutorial", assay = "RNA")
print(seurat_obj)
seurat_obj <- NormalizeData(seurat_obj)
seurat_obj <- FindVariableFeatures(seurat_obj)
seurat_obj <- ScaleData(seurat_obj)
seurat_obj <- RunPCA(seurat_obj)
seurat_obj_spliced <- Azimuth::RunAzimuth(seurat_obj, reference = "kidneyref")
available_data<-AvailableData()
available_data
#Install the human lung reference data
InstallData('kidneyref')
adata <- anndata$read_h5ad("data/expr.h5ad")
str(adata)
dim(adata)
class(adata)
print(adata$layers$keys())
data <- as.matrix(data)
dim(data)
seurat_obj <- CreateSeuratObject(counts = data, project = "tutorial", assay = "RNA")
print(seurat_obj)
InstallData('kidneyref')
adata <- anndata$read_h5ad("data/expr.h5ad")
str(adata)
dim(adata)
class(adata)
print(adata$layers$keys())
data <- as.matrix(data)
# Check the dimensions
dim(data)
seurat_obj <- CreateSeuratObject(counts = data, project = "tutorial", assay = "RNA")
print(seurat_obj)
seurat_obj <- NormalizeData(seurat_obj)
seurat_obj <- FindVariableFeatures(seurat_obj)
seurat_obj <- ScaleData(seurat_obj)
seurat_obj <- RunPCA(seurat_obj)
seurat_obj_spliced <- Azimuth::RunAzimuth(seurat_obj, reference = "kidneyref")
head(rownames(seurat_obj))
kidneyref_features <- rownames(kidneyref)
head(adata$var_names)
print(adata$layers$keys())
head(rownames(seurat_obj))
# Load required libraries
library(Seurat)
library(Azimuth)
library(SeuratData)
library(reticulate)
reticulate::py_install("anndata")
anndata <- import("anndata")
#First view available datasets and double check the name of the reference we plan to use.
available_data<-AvailableData()
available_data
#Install the human lung reference data
InstallData('kidneyref')
adata <- anndata$read_h5ad("data/expr.h5ad")
head(adata$var_names)  # Use adata$var_names for features in the AnnData object
print(adata$layers$keys())  # Should list available layers
str(adata)
dim(adata)
class(adata)
print(adata$layers$keys())
# Extract the "spliced" layer
# data <- py_to_r(adata$layers$get("spliced"))
# Convert it to a matrix if it's not already
data <- as.matrix(data)
# Check the dimensions
dim(data)
seurat_obj <- CreateSeuratObject(counts = data, project = "tutorial", assay = "RNA")
head(rownames(seurat_obj))
# Check the Seurat object
print(seurat_obj)
seurat_obj <- NormalizeData(seurat_obj)
seurat_obj <- FindVariableFeatures(seurat_obj)
seurat_obj <- ScaleData(seurat_obj)
seurat_obj <- RunPCA(seurat_obj)
# Run Azimuth for cell type annotation
seurat_obj_spliced <- Azimuth::RunAzimuth(seurat_obj, reference = "kidneyref")
library(biomaRt)
# Use Ensembl to get gene symbols from Ensembl IDs
mart <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
gene_ids <- rownames(seurat_obj)
gene_conversion <- getBM(attributes = c('ensembl_gene_id', 'hgnc_symbol'),
filters = 'ensembl_gene_id',
values = gene_ids,
mart = mart)
conversion_table <- data.frame(Ensembl_ID = gene_conversion$ensembl_gene_id, Gene_Symbol = gene_conversion$hgnc_symbol)
rownames(seurat_obj) <- conversion_table$Gene_Symbol[match(rownames(seurat_obj), conversion_table$Ensembl_ID)]
# Check the feature names again
head(rownames(seurat_obj))
# Inspect the conversion table
head(conversion_table)
# Load required libraries
library(Seurat)
library(Azimuth)
library(SeuratData)
library(reticulate)
reticulate::py_install("anndata")  # Install the 'anndata' Python package
anndata <- import("anndata")  # Import the Python 'anndata' module
adata <- anndata$read_h5ad("data/expr.h5ad")
# Check the feature names in the AnnData object
head(adata$var_names)
# Print available layers in the dataset
print(adata$layers$keys())
# Extract the "spliced" layer and convert it to a matrix
spliced_data <- adata$layers$spliced
kidneyref <- LoadData("kidneyref")
InstallData('kidneyref')
kidney_ref <- LoadData('kidneyref')
# Install required libraries
install.packages("Seurat")
remotes::install_github("satijalab/azimuth", ref = "master")
install.packages("SeuratData")
install.packages("biomaRt")
# Load the libraries
library(Seurat)
library(Azimuth)
library(SeuratData)
library(reticulate)
reticulate::py_install("anndata")  # Install the 'anndata' Python package
anndata <- import("anndata")  # Import the Python 'anndata' module
# Load the libraries
library(Seurat)
library(Azimuth)
library(SeuratData)
library(reticulate)
anndata <- import("anndata")  # Import the Python 'anndata' module
# Load the AnnData file
adata <- anndata$read_h5ad("data/expr.h5ad")
# Check the structure of the AnnData object
str(adata)
# Check the features in the AnnData object
head(adata$var_names)
# Convert the AnnData object into a Seurat object
# This step assumes that the expression matrix is in adata.X (the data matrix in AnnData)
seurat_obj <- CreateSeuratObject(counts = as.matrix(adata$X), project = "tutorial", assay = "RNA")
# Check the Seurat object to ensure it was created properly
print(seurat_obj)
# Normalize the data
seurat_obj <- NormalizeData(seurat_obj)
# Find variable features
seurat_obj <- FindVariableFeatures(seurat_obj)
# Scale the data
seurat_obj <- ScaleData(seurat_obj)
# Run PCA for dimensionality reduction
seurat_obj <- RunPCA(seurat_obj)
# Run Azimuth with the reference "kidneyref"
seurat_obj_spliced <- Azimuth::RunAzimuth(seurat_obj, reference = "kidneyref")
# Define the biomart object for human genes
mart <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
# Get the gene symbols for Ensembl IDs
gene_ids <- rownames(seurat_obj)
gene_conversion <- getBM(attributes = c('ensembl_gene_id', 'hgnc_symbol'),
filters = 'ensembl_gene_id',
values = gene_ids,
mart = mart)
# Create a conversion table
conversion_table <- data.frame(Ensembl_ID = gene_conversion$ensembl_gene_id, Gene_Symbol = gene_conversion$hgnc_symbol)
# Replace Ensembl Gene IDs with Gene symbols in the Seurat object
rownames(seurat_obj) <- conversion_table$Gene_Symbol[match(rownames(seurat_obj), conversion_table$Ensembl_ID)]
# Check the first few row names in the Seurat object after conversion
head(rownames(seurat_obj))
seurat_obj_spliced <- Azimuth::RunAzimuth(seurat_obj, reference = "kidneyref")
data <- read_h5ad("data/expr.h5ad")
library(reticulate)
py_install("scanpy")
library(reticulate)
library(seurat)
library(reticulate)
library(Seurat)
library(Matrix)
sc <- import("scanpy")
file_path <- "data/expr.h5ad"
atlas.data <- sc$read_h5ad(file_path)
py_run_string("!pip uninstall -y numpy")
py_run_string("!pip install numpy==1.21")
library(reticulate)
# Use reticulate to run pip uninstall and install commands
py_run_string("!pip uninstall -y numpy")
py_install("numpy==1.21")
py_install("scanpy")
# Import scanpy
sc <- import("scanpy")
reticulate::py_last_error()
library(reticulate)
py_run_string("!pip uninstall -y numpy")
system("pip uninstall -y numpy")
reticulate::py_run_string("import ensurepip; ensurepip.bootstrap()")
reticulate::py_install("numpy==1.21")
py_install(c("scanpy", "anndata"))
sc <- import("scanpy")
reticulate::py_last_error()
sc <- import("scanpy")
reticulate::py_last_error()
reticulate::py_config()
# Uninstall the current version of NumPy
reticulate::py_run_string("!pip uninstall -y numpy")
# Uninstall the current version of NumPy
reticulate::py_run_string("pip uninstall -y numpy")
# Run shell command to uninstall NumPy
system("pip uninstall -y numpy")
# Uninstall the current version of NumPy
reticulate::py_run_string("!pip uninstall -y numpy")
# Uninstall the current version of NumPy
reticulate::py_run_string("!pip uninstall -y numpy")
reticulate::py_uninstall("numpy", pip = TRUE)
# Install scanpy
system("pip install scanpy")
python --version
reticulate::py_config()  # Verify Python configuration
# Import scanpy
sc <- import("scanpy")
reticulate::py_last_error()
reticulate::py_run_string("!pip uninstall -y numpy")
reticulate::py_last_error()
reticulate::py_config()
